#!/usr/bin/env python
"""
Driver script for running mylearn model experiments.
"""

import argparse
import logging
import sys

import mylearn
from mylearn.util.persist import deserialize



def parse_args():
    """
    Sets up and handles command line argument parsing.
    """
    parser = argparse.ArgumentParser(description='run simple experiment.')
    parser.add_argument('yaml_file', type=argparse.FileType('r'),
                        help='configuration file settings')
    parser.add_argument('-v', '--version', action='version',
                        version=mylearn.__version__)
    parser.add_argument('-p', '--profile', action='store',
                        help=('Collect and write profiling stats to the file '
                              'specified.  Or stdout if empty string.'))
    parser.add_argument('-d', '--debug', action='store_true',
                        help='call ipython debugger on uncaught exception')
    return(parser.parse_args())


def main():
    """
    Point of code entry.
    """
    # read in yaml configuration and initialize objects
    args = parse_args()
    if args.profile is not None:
        import cProfile
        p = cProfile.Profile()
        p.enable()
    try:
        experiment = deserialize(args.yaml_file)
        if hasattr(experiment, 'logging'):
            logging.basicConfig(**experiment.logging)
            if args.profile is not None:
                logging.info("Profiling code to: %s" % (
                             args.profile if args.profile != "" else "stdout"))
        # carry out the experiment
        result = experiment.run()
        if args.profile is not None:
            if args.profile == "":
                p.print_stats("tottime")
            else:
                p.dump_stats(args.profile)
        return experiment, result
    except Exception as e:
        if args.debug:
            import ipdb, traceback
            traceback.print_exc()
            ipdb.post_mortem(sys.exc_info()[2])
        else:
            raise

if __name__ == '__main__':
    experiment, result = main()
    sys.exit(result)
