#!/usr/bin/env python
# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
"""
Wrapper to call MEO on a neon model.
Based on grad executable.

The plan:
-
"""

import argparse
import logging
import sys

import neon
from neon.util.persist import deserialize
from neon.experiments.spear_mint import SpearMint


def parse_args():
    """
    Sets up and handles command line argument parsing.
    """
    parser = argparse.ArgumentParser(description='run basic tests.')
    parser.add_argument('yaml_file', type=argparse.FileType('r'),
                        help='configuration file settings')
    return(parser.parse_args())


def main():
    """
    Point of code entry.
    """
    # read in yaml configuration and initialize objects
    args = parse_args()
    experiment = deserialize(args.yaml_file)

    if hasattr(experiment, 'logging'):
        logging.basicConfig(**experiment.logging)

    # get parameter suggestions, run experiment with generated yaml, repeat:
    mint = SpearMint()
    mint.transfer(experiment)
    result = mint.run()
    return experiment, result


if __name__ == '__main__':
    experiment, result = main()
    sys.exit(result)
