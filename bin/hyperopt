#!/usr/bin/env python
# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
"""
Wrapper to call hyperparameter optimization on a neon model.
Based on grad executable.

The plan:
- first of all, implement a random search only.
- later, integrate spearmint-lite, which means take the results from a
  run and add them to a file ()
"""

import argparse
import logging
import sys

import neon
from neon.util.meta_persist import deserialize_and_cast, serialize
from neon.util.persist import deserialize
#from neon.experiments.hyperopt import HyperOpt
from ipdb import set_trace as trace


def parse_args():
    """
    Sets up and handles command line argument parsing.
    """
    parser = argparse.ArgumentParser(description='run basic tests.')
    parser.add_argument('yaml_file', type=argparse.FileType('r'),
                        help='configuration file settings')
    return(parser.parse_args())


def main():
    """
    Point of code entry.
    """
    # read in yaml configuration and initialize objects
    args = parse_args()
    # parse the hyper-yaml and choose a set of parameters
    experi = deserialize_and_cast(args.yaml_file) # returns a dict
    # experi = deserialize(args.yaml_file) # returns a class
    # create a yaml to run on
    i = 0
    save_path = 'tempyaml' + str(i) + '.yaml'
    serialize(experi, save_path)

    # I have lost all patience and resort to the following hack to create a
    # properly formated yaml file:
    # use a hack to fix up the file:
    with open(save_path, 'r') as f:
        text = f.read()
        text = text.replace('\'@@', '')
        text = text.replace('@@\'', '')
    with open(save_path, 'w') as f:
        f.write(text)


    trace()

    # run the yaml that was created, but don't call neon, do it manually
    # so it's easy to capture the result
    experiment = deserialize(save_path)
    result = experiment.run()

    return experiment, result


if __name__ == '__main__':
    experiment, result = main()
    sys.exit(result)
