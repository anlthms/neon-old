#!/usr/bin/env python
# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
"""
Shell script to control spearmint runs
"""

import argparse
import os, sys
from ipdb import set_trace as trace


def parse_args():
    """
    Sets up and handles command line argument parsing.
    """
    parser = argparse.ArgumentParser(description='run spearmint hyperoptimize')
    parser.add_argument('cmd', type=str,  action='store', default='def',
                        help='init, run or reset ')
    parser.add_argument('-p', '--port', type=int, action='store', default=5000,
                        help='port number for visualization server')
    parser.add_argument('-n', '--threads', type=int, action='store', default=1,
                        help='number of simultaneous experiments')
    parser.add_argument('-y', '--yaml', type=str, action='store',
                        default='examples/hyper_iris_cpu_mlp-4-2-3.yaml',
                        help='hyperyaml to generate protobuf from')
    return parser.parse_args()

def main():
    """
    Point of code entry.
    """
    argz = parse_args()
    if (argz.cmd == 'reset'):
        os.system('../spearmint/spearmint/bin/cleanup neon/spearmint  &&'
                  'rm neon/spearmint/yamels/*.yaml &&'
                  'rmdir neon/spearmint/yamels &&'
                  'rmdir neon/spearmint/jobs &&'
                  'rmdir neon/spearmint/output &&'
                  'rm neon/spearmint/neon_results_validation.txt &&'
                  'rm neon/spearmint/spear_config.pb &&'
                  'rm neon/spearmint/hyperyaml.yaml')
        print("Running cleanup")
    if (argz.cmd == 'run'):
        os.system('cd neon/spearmint && pwd && '
                  '../../../spearmint/spearmint/bin/spearmint '
                  'spear_config.pb '
                  '--driver=local --method=GPEIperSecChooser '
                  '--method-args=noiseless=0 --polling-time=20 '
                  '--max-concurrent=' + str(argz.threads) +
                  ' -w --port=' + str(argz.port) )
    if (argz.cmd == 'init'):
        input_file = argz.yaml
        os.system('cp ' + input_file + ' neon/spearmint/hyperyaml.yaml')
        os.system('python neon/spearmint/spear_writer.py')

if __name__ == '__main__':
    result = main()
    sys.exit(result)
