#!/usr/bin/env python
# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
"""
Wrapper to call hyperparameter optimization on a neon model.
Based on grad executable.

The plan:
- first of all, implement a random search only.
- later, integrate spearmint-lite, which means take the results from a
  run and add them to a file ()
"""

import argparse
import logging
import sys

import neon
from neon.util.persist import deserialize
from neon.experiments.hyperopt import HyperOpt
from ipdb import set_trace as trace


def parse_args():
    """
    Sets up and handles command line argument parsing.
    """
    parser = argparse.ArgumentParser(description='run basic tests.')
    parser.add_argument('yaml_file', type=argparse.FileType('r'),
                        help='configuration file settings')
    return(parser.parse_args())


def main():
    """
    Point of code entry.
    """
    # read in yaml configuration and initialize objects
    args = parse_args()
    experiment = deserialize(args.yaml_file)
    trace()

    # pick some parameters to use:
    if experiment.hyperopt[0]['chooser'] is 'shotgun':
        experiment.model.layers[0].learning_rule
        experiment.model.layers[0].learning_rule.lr_params.learning_rate
        # [BUG] problem - can't look inside the object where the range is.

    # now serialize it again so

    if hasattr(experiment, 'logging'):
        logging.basicConfig(**experiment.logging)

    # get parameter suggestions, run experiment with generated yaml, repeat:
    mint = SpearMint()
    mint.transfer(experiment)
    result = mint.run()
    return experiment, result


if __name__ == '__main__':
    experiment, result = main()
    sys.exit(result)
