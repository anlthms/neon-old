#!/usr/bin/env python
# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
"""
Wrapper to call hyperparameter optimization on a neon model.
Based on grad executable.

The plan:
- first of all, implement a random search only.
- later, integrate spearmint-lite, which means take the results from a
  run and add them to a file ()
"""

import argparse
import logging
import sys

import neon
from neon.util.meta_persist import deserialize_and_cast, serialize
from neon.util.persist import deserialize
from ipdb import set_trace as trace
from neon.experiments.hyperopt import parse_line

def parse_args():
    """
    Sets up and handles command line argument parsing.
    """
    parser = argparse.ArgumentParser(description='run basic tests.')
    parser.add_argument('yaml_file', type=argparse.FileType('r'),
                        help='configuration file settings')
    return(parser.parse_args())






def main():
    """
    Point of code entry.
    """
    logging.basicConfig(level=30)
    # read in yaml configuration and initialize objects
    args = parse_args()
    # parse the hyper-yaml and choose a set of parameters
    for i in range(3):
        print "testing i", i
        load_path = args.yaml_file.name
        save_path = 'tempyaml' + str(i) + '.yaml'
        with open(load_path, 'r') as f:
            with open(save_path, 'w') as g:
                for line in f:
                    if 'hyperopt' in line:
                        line = parse_line(line)
                    g.write(line)

        # run the yaml that was created
        experiment = deserialize(save_path)
        if hasattr(experiment, 'logging'):
            logger = logging.getLogger()
            handler = logger.handlers[0]
            if "filename" in experiment.logging:
                logging.info("replacing console logging with file logging: %s",
                             experiment.logging["filename"])
                logger.removeHandler(handler)
                handler = logging.FileHandler(experiment.logging["filename"])
                logger.addHandler(handler)
            if "format" in experiment.logging:
                formatter = logging.Formatter(experiment.logging["format"])
                handler.setFormatter(formatter)
            if "level" in experiment.logging:
                logging.info("setting log level to: %d",
                             experiment.logging["level"])
                logger.setLevel(experiment.logging["level"])

        result = experiment.run()

    return experiment, result


if __name__ == '__main__':
    experiment, result = main()
    sys.exit(result)
