# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------
# Network in network implemented using 1x1 convolutions.

!obj:neon.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:neon.backends.cpu.CPU {
    rng_seed: 0,
  },

  datasets: [
    !obj:neon.datasets.cifar10.CIFAR10 {
      backend: *be,
      repo_path: '~/data',
      sample_pct: 10,
    },
  ],
  
  model: !obj:neon.models.mlp.MLP {
    backend: *be,
    num_epochs: 2,
    batch_size: &bs 100,
    learning_rate: &lr 0.01,
    momentum_params: &mm {
      type: linear_monotone,
      initial_coef: 0.99,
      start_epoch: 5,
      saturate_epoch: 5,
      saturated_coef: 0.90,
    },
    layers: [
      # NOTE: All the weights on the 1x1 convolutional
      # layers are set to positive values. 
      !obj:neon.models.layer.ConvLayer {
        name: layer0,
        backend: *be,
        activation: !obj:neon.transforms.rectified.RectLin {},
        batch_size: *bs,
        pos: 0,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: rule,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nifm: 3,
        nofm: 48,
        ifmshape: [32, 32],
        fshape: [3, 3],
        stride: 1,
        weight_init: !obj:params.UniformValGen {
          backend: *be,
          low: -0.1,
          high: 0.1,
        },
      },
      !obj:neon.models.layer.ConvLayer {
        name: layer1,
        backend: *be,
        activation: !obj:neon.transforms.rectified.RectLin {},
        batch_size: *bs,
        pos: 1,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: rule,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nifm: 48,
        nofm: 32,
        ifmshape: [30, 30],
        fshape: [1, 1],
        stride: 1,
        weight_init: !obj:params.UniformValGen {
          backend: *be,
          low: 0.0,
          high: 0.1,
        },
      },
      !obj:neon.models.layer.ConvLayer {
        name: layer2,
        backend: *be,
        activation: !obj:neon.transforms.rectified.RectLin {},
        batch_size: *bs,
        pos: 2,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: rule,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nifm: 32,
        nofm: 16,
        ifmshape: [30, 30],
        fshape: [1, 1],
        stride: 1,
        weight_init: !obj:params.UniformValGen {
          backend: *be,
          low: 0.0,
          high: 0.1,
        },
      },
      !obj:neon.models.layer.MaxPoolingLayer {
        name: layer3,
        backend: *be,
        batch_size: *bs,
        pos: 3,
        nifm: 16,
        ifmshape: [30, 30],
        fshape: [2, 2],
        stride: 2,
      },

      !obj:neon.models.layer.ConvLayer {
        name: layer4,
        backend: *be,
        activation: !obj:neon.transforms.rectified.RectLin {},
        batch_size: *bs,
        pos: 4,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: rule,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nifm: 16,
        nofm: 48,
        ifmshape: [15, 15],
        fshape: [2, 2],
        stride: 1,
        weight_init: !obj:params.UniformValGen {
          backend: *be,
          low: -0.1,
          high: 0.1,
        },
      },
      !obj:neon.models.layer.ConvLayer {
        name: layer5,
        backend: *be,
        activation: !obj:neon.transforms.rectified.RectLin {},
        batch_size: *bs,
        pos: 5,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: rule,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nifm: 48,
        nofm: 32,
        ifmshape: [14, 14],
        fshape: [1, 1],
        stride: 1,
        weight_init: !obj:params.UniformValGen {
          backend: *be,
          low: 0.0,
          high: 0.1,
        },
      },
      !obj:neon.models.layer.ConvLayer {
        name: layer6,
        backend: *be,
        activation: !obj:neon.transforms.rectified.RectLin {},
        batch_size: *bs,
        pos: 6,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: rule,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nifm: 32,
        nofm: 10,
        ifmshape: [14, 14],
        fshape: [1, 1],
        stride: 1,
        weight_init: !obj:params.UniformValGen {
          backend: *be,
          low: 0.0,
          high: 0.1,
        },
      },
      !obj:neon.models.layer.Layer {
        name: layer7,
        backend: *be,
        batch_size: *bs,
        pos: 7,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: rule,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nin: 1960,
        nout: 500,
        activation: !obj:neon.transforms.rectified.RectLin {},
        weight_init: !obj:params.UniformValGen {
          backend: *be,
          low: -0.1,
          high: 0.1,
        },
      },
      &lastlayer !obj:neon.models.layer.Layer {
        name: output,
        backend: *be,
        batch_size: *bs,
        pos: 8,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: outputlr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nin: 500,
        nout: 10,
        activation: !obj:neon.transforms.logistic.Logistic {},
        weight_init: !obj:params.UniformValGen {
          backend: *be,
          low: -0.1,
          high: 0.1,
        },
      },
    ],
    cost: !obj:neon.transforms.cross_entropy.CrossEntropy {
      olayer: *lastlayer,
    },
  },
  
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
