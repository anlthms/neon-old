# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
# Experiment settings to train/test logistic regression on MNIST.

!obj:neon.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:neon.backends.cpu.CPU {
    rng_seed: 0,
    # set which numpy issues raise exceptions, warnings, etc.
    # see: numpy.seterr()
    seterr_handling: {
      all: 'warn',
    },
  },

  dataset: !obj:neon.datasets.mnist.MNIST {
      backend: *be,
      repo_path: '/usr/local/data',
      sample_pct: 100,
  },

  weight_init: &wt_init !obj:params.GaussianValGen {
    backend: *be,
    loc: 0.0,
    scale: 0.01,
    bias_init: 0.0,
  },

  lrule: [
    &gdm {
      type: gradient_descent_momentum,
      lr_params: {
        learning_rate: 0.1,
        backend: *be,
        momentum_params: {
          type: constant,
          coef: 0.0,
        },
      },
    },
    &ada {
      type: adadelta,
      lr_params: {
        rho: &ro 0.95,
        epsilon: &eps 0.000001,
        backend: *be,
      },
    },
  ],
  # simple MLP model specification
  model: !obj:neon.models.mlp.MLPB {
    backend: *be,
    num_epochs: 10,
    batch_size: &bs 100,
    serialized_path: './logreg.prm',
    layers: [
      &datalayer !obj:neon.models.layer2.DataLayer {
        name: d0,
        nout: 784,
      },
      &lastlayer !obj:neon.models.layer2.FCLayer {
        name: h0,
        backend: *be,
        pos: 0,
        nin: 784,
        nout: 10,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:neon.transforms.logistic.Logistic {},
      },
      &costlayer !obj:neon.models.layer2.CostLayer {
        name: cost,
        ref_layer: *datalayer,
        cost: !obj:neon.transforms.cross_entropy.CrossEntropy {},
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
