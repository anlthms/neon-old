# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
# Experiment settings to train/test a CNN on NDSB.

!obj:neon.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:neon.backends.gpu.GPU {
    rng_seed: 0,
  },

  dataset: &ds !obj:neon.datasets.ndsb.NDSB {
    backend: *be,
    repo_path: '/usr/local/data',
    sample_pct: 100,
    image_width: 64,
    # serialized_path: '/usr/local/data/NDSB/ndsb.pkl',
  },
  weight_init: &wt_init {
    type: uniform,
    low: -0.1,
    high: 0.1,
  },

  lrule: &adad {
    type: adadelta,
    lr_params: &lrp {
      epsilon: 0.000001,
      rho: 0.95,
      backend: *be,
    },
  },

  # CNN model specification
  # essentially a multi-layer perceptron with convolutional and pooling layers
  model: !obj:neon.models.mlp.MLPB {
    backend: *be,
    num_epochs: 50,
    batch_size: &bs 128,
    layers: [
      &datalayer !obj:neon.models.layer.DataLayerB {
        name: d0,
        nout: 4096,
        dataset: *ds,
      },
      !obj:neon.models.layer.ConvLayerB {
        name: layer1,
        lrule_init: *adad,
        nofm: 16,
        fshape: [3, 3],
        stride: 1,
        activation: !obj:neon.transforms.rectified.RectLin {},
        weight_init: *wt_init,
      },
      !obj:neon.models.layer.PoolingLayerB {
        name: layer2,
        op: 'max',
        fshape: [2, 2],
        stride: 2,
      },
      !obj:neon.models.layer.CrossMapResponseNormLayerB {
        name: cmrn,
        ksize: 5,
        alpha: 0.001,
        beta: 0.75,
      },
      !obj:neon.models.layer.ConvLayerB {
        name: layer3,
        lrule_init: *adad,
        nofm: 32,
        fshape: [2, 2],
        stride: 1,
        activation: !obj:neon.transforms.rectified.RectLin {},
        weight_init: *wt_init,
      },
      !obj:neon.models.layer.PoolingLayerB {
        name: layer4,
        op: 'max',
        fshape: [2, 2],
        stride: 2,
      },
      !obj:neon.models.layer.CrossMapResponseNormLayerB {
        name: cmrn,
        ksize: 5,
        alpha: 0.001,
        beta: 0.75,
      },
      !obj:neon.models.layer.DropOutLayerB {
        name: dropout,
        keep: 0.2,
      },
      !obj:neon.models.layer.ConvLayerB {
        name: layer5,
        lrule_init: *adad,
        nofm: 64,
        fshape: [2, 2],
        stride: 1,
        activation: !obj:neon.transforms.rectified.RectLin {},
        weight_init: *wt_init,
      },
      !obj:neon.models.layer.PoolingLayerB {
        name: layer6,
        op: 'max',
        fshape: [2, 2],
        stride: 2,
      },
      !obj:neon.models.layer.CrossMapResponseNormLayerB {
        name: cmrn,
        ksize: 5,
        alpha: 0.001,
        beta: 0.75,
      },
      !obj:neon.models.layer.DropOutLayerB {
        name: dropout,
        keep: 0.3,
      },
      !obj:neon.models.layer.ConvLayerB {
        name: layer7,
        lrule_init: *adad,
        nofm: 128,
        fshape: [2, 2],
        stride: 1,
        activation: !obj:neon.transforms.rectified.RectLin {},
        weight_init: *wt_init,
      },
      !obj:neon.models.layer.FCLayerB {
        name: layer8,
        lrule_init: *adad,
        nout: 1000,
        activation: !obj:neon.transforms.rectified.RectLin {},
        weight_init: *wt_init,
      },
      &lastlayer !obj:neon.models.layer.FCLayerB {
        name: output,
        lrule_init: *adad,
        nout: 121,
        activation: !obj:neon.transforms.softmax.Softmax {
          shortcut_deriv: True,
        },
        weight_init: *wt_init,
      },
      &costlayer !obj:neon.models.layer.CostLayerB {
        name: cost,
        ref_layer: *datalayer,
        cost: !obj:neon.transforms.cross_entropy.CrossEntropy {
          shortcut_deriv: True,
          use_binary: False,
        },
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
