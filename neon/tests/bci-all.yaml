# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------

!obj:experiments.FitPredictErrorExperiment {
  report_sets: ['validation'],
  metrics: ['auc'],

  dataset: &dsraw !obj:datasets.BCI {
      repo_path: '~/data',
      sample_pct: 100,
      data_type: 'raw',
  },
  dataset2: &dsvid !obj:datasets.BCI {
      repo_path: '~/data',
      sample_pct: 100,
      data_type: 'vid',
  },

  weight_init: &wt_init !obj:params.UniformValGen {
    low: -0.01,
    high: 0.01,
  },

  lrules: [
    &gdm {
      type: gradient_descent_momentum,
      lr_params: {
        learning_rate: 0.0001,
        momentum_params: {
          type: constant,
          coef: 0.90,
        },
      },
    },
    &ada {
      type: adadelta,
      lr_params: {
        rho: &ro 0.95,
        epsilon: &eps 0.00000001,
      },
    },
  ],

  model: !obj:models.MLP {
    num_epochs: 50,
    batch_size: &bs 128,
    layers: [
      !obj:layers.BranchLayer {
        name: blayer,
        sublayers: [
            !obj:layers.ListLayer {
                name: list1,
                sublayers: [
                    &datalayer !obj:layers.DataLayer {
                        name: dsraw,
                        nout: 14560,
                        dataset: *dsraw,
                    },
                    !obj:layers.FCLayer {
                      name: list1layer1,
                      nout: 512,
                      activation: !obj:transforms.RectLin {},
                      lrule_init: *gdm,
                      weight_init: *wt_init,
                    },
                ]
            },
            !obj:layers.ListLayer {
                name: list2,
                sublayers: [
                    !obj:layers.DataLayer {
                        name: dsvid,
                        is_local: True,
                        nofm: 30,
                        ofmshape: [16, 16, 16],
                        dataset: *dsvid,
                    },
                    !obj:layers.ConvLayer {
                      name: list2layer1,
                      activation: !obj:transforms.RectLin {},
                      nofm: 32,
                      fshape: [2, 2, 2],
                      stride: 1,
                      lrule_init: *gdm,
                      weight_init: *wt_init,
                    },
                    !obj:layers.PoolingLayer {
                      name: list2layer2,
                      op: 'max',
                      fshape: [2, 2, 2],
                      stride: 2,
                    },
                    !obj:layers.ConvLayer {
                      name: list2layer3,
                      activation: !obj:transforms.RectLin {},
                      nofm: 64,
                      fshape: [2, 2, 2],
                      stride: 1,
                      lrule_init: *gdm,
                      weight_init: *wt_init,
                    },
                    !obj:layers.PoolingLayer {
                      name: list2layer4,
                      op: 'max',
                      fshape: [2, 2, 2],
                      stride: 2,
                    },
                    !obj:layers.FCLayer {
                      name: list2layer5,
                      nout: 512,
                      activation: !obj:transforms.RectLin {},
                      lrule_init: *gdm,
                      weight_init: *wt_init,
                    },
                ]
            },
        ]
      },
      !obj:layers.DropOutLayer {
        name: dropout1,
        keep: 0.5,
      },
      !obj:layers.FCLayer {
        name: layer2,
        nout: 128,
        activation: !obj:transforms.RectLin {},
        lrule_init: *gdm,
        weight_init: *wt_init,
      },
      !obj:layers.DropOutLayer {
        name: dropout2,
        keep: 0.5,
      },
      &lastlayer !obj:layers.FCLayer {
        name: output,
        nout: 2,
        activation: !obj:transforms.Logistic {},
        lrule_init: *gdm,
        weight_init: *wt_init,
      },
      &costlayer !obj:layers.CostLayer {
        name: cost,
        ref_layer: *datalayer,
        cost: !obj:transforms.CrossEntropy {},
      },
    ],
  },

  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
