# Experiment settings to train/test a stacked autoencoder on MNIST.

!obj:mylearn.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:mylearn.backends._cudamat.Cudamat {
    rng_seed: 0,
  },

  datasets: [
    # MNIST data
    !obj:mylearn.datasets.mnist.MNIST {
      backend: *be,
      repo_path: '/usr/local/data',
      sample_pct: 100,
      serialized_path: '/usr/local/data/MNIST/mnist-Cudamat.pkl',
    },
  ],
  
  # Autoencoder model specification
  model: !obj:mylearn.models.autoencoder.Autoencoder {
    backend: *be,
    num_epochs: 60,
    batch_size: &bs 100,
    learning_rate: &lr 0.0001,
    momentum: {
      type: linear_monotone, #constant, nesterov
      initial_coef: 0.99,
      start_epoch: 5,
      saturate_epoch: 5,
      saturated_coef: 0.90,
    },
    cost: !obj:mylearn.transforms.cross_entropy.CrossEntropy {},
    serialized_path: './sae.pkl',
    layers: [
      !obj:mylearn.models.layer.AELayer {
        name: enc1,
        backend: *be,
        batch_size: *bs,
        pos: 0,
        learning_rate: *lr,
        nin: 784,  # input layer.  No bias used
        nout: 1000,
        activation: !obj:mylearn.transforms.logistic.Logistic {},
        weight_init: {
          type: gaussian,
          scale: 0.1,
        },
      },
      !obj:mylearn.models.layer.AELayer {
        name: enc2,
        backend: *be,
        batch_size: *bs,
        pos: 1,
        learning_rate: *lr,
        nin: 1000,
        nout: 500,
        activation: !obj:mylearn.transforms.logistic.Logistic {},
        weight_init: {
          type: gaussian,
          scale: 0.1,
        },
      },
      !obj:mylearn.models.layer.AELayer {
        name: enc3,
        backend: *be,
        batch_size: *bs,
        pos: 2,
        learning_rate: *lr,
        nin: 500,
        nout: 250,
        activation: !obj:mylearn.transforms.logistic.Logistic {},
        weight_init: {
          type: gaussian,
          scale: 0.1,
        },
      },
      !obj:mylearn.models.layer.AELayer {
        name: enc4,
        backend: *be,
        batch_size: *bs,
        pos: 3,
        learning_rate: *lr,
        nin: 250,
        nout: 30,
        activation: !obj:mylearn.transforms.linear.Identity {},
        weight_init: {
          type: gaussian,
          scale: 0.1,
        },
      },
      !obj:mylearn.models.layer.AELayer {
        name: dec1,
        backend: *be,
        batch_size: *bs,
        pos: 4,
        learning_rate: *lr,
        nin: 30,
        nout: 250,
        activation: !obj:mylearn.transforms.logistic.Logistic {},
        weight_init: {
          type: gaussian,
          scale: 0.1,
        },
      },
      !obj:mylearn.models.layer.AELayer {
        name: dec2,
        backend: *be,
        batch_size: *bs,
        pos: 5,
        learning_rate: *lr,
        nin: 250,
        nout: 500,
        activation: !obj:mylearn.transforms.logistic.Logistic {},
        weight_init: {
          type: gaussian,
          scale: 0.1,
        },
      },
      !obj:mylearn.models.layer.AELayer {
        name: dec3,
        backend: *be,
        batch_size: *bs,
        pos: 6,
        learning_rate: *lr,
        nin: 500,
        nout: 1000,
        activation: !obj:mylearn.transforms.logistic.Logistic {},
        weight_init: {
          type: gaussian,
          scale: 0.1,
        },
      },
      !obj:mylearn.models.layer.AELayer {
        name: dec4,
        backend: *be,
        batch_size: *bs,
        pos: 7,
        learning_rate: *lr,
        nin: 1000,
        nout: 784,
        activation: !obj:mylearn.transforms.logistic.Logistic {},
        weight_init: {
          type: gaussian,
          scale: 0.1,
        },
      },
    ],
  },
  
  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
