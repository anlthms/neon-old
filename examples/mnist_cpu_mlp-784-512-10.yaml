# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
# Experiment settings to train/test a 1 hidden layer Neural Net on full
# MNIST.  Parameters are optimized for performance.

!obj:neon.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:neon.backends.cpu.CPU {
    rng_seed: 0,
    # set which numpy issues raise exceptions, warnings, etc.
    # see: numpy.seterr()
    seterr_handling: {
      all: 'warn',
    },
  },

  datasets: [
    # MNIST data
    !obj:neon.datasets.mnist.MNIST {
      backend: *be,
      repo_path: '/usr/local/data',
      sample_pct: 100,
    },
  ],

  # simple MLP model specification
  model: !obj:neon.models.mlp.MLP {
    backend: *be,
    num_epochs: 100,
    batch_size: &bs 100,
    # serialized_path: './mlp-simple.pkl',
    layers: [
      !obj:neon.models.layer.Layer {
        name: h0,
        backend: *be,
        batch_size: *bs,
        pos: 0,
        learning_rule: !obj:neon.models.learning_rule.GradientDescent {
          name: h0lr,
          lr_params: {
            learning_rate: &lr 0.00001,
            backend: *be,
          },
        },
        nin: 784,
        nout: 512,
        activation: !obj:neon.transforms.logistic.Logistic {},
        weight_init: {
          type: uniform,
          scale: 0.1,
        },
      },
      &lastlayer !obj:neon.models.layer.Layer {
        name: output,
        backend: *be,
        batch_size: *bs,
        pos: 1,
        learning_rule: !obj:neon.models.learning_rule.GradientDescent {
          name: outputlr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
          },
        },
        nin: 512,
        nout: 10,
        activation: !obj:neon.transforms.logistic.Logistic {
          shortcut_deriv: True,
        },
        weight_init: {
          type: uniform,
          scale: 0.1,
        },
      },
    ],
    cost: !obj:neon.transforms.cross_entropy.CrossEntropy {
      olayer: *lastlayer,
    },
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
