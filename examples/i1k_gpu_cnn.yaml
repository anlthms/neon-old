# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
# Experiment settings to train/test a small CNN on ImageNet.

!obj:neon.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:neon.backends.gpu.GPU {
    rng_seed: 0,
  },

  datasets: [
    # MNIST data
    !obj:neon.datasets.i1k.I1K {
      backend: *be,
      load_path: '/usr/local/data', #directory where .tar files are stored
      repo_path: '/usr/local/data', #directory to use for writing files
      serialized_path: '/usr/local/data/I1K/I1K_dataset.pkl', #delete if loading files from scratch
      # sample_pct: .1,
      max_tar_file: 4, #use this instead of sample_pct
      macro_batched: True,
      output_image_size: &ois 256,
      # macro batch start and end indices for train and val datasets
      # need #macro batches * output_batch_size to divide nrecs
      start_train_batch: 0,
      end_train_batch: 0,
      start_val_batch: 0,
      end_val_batch: 0,
    },
  ],

  # CNN model specification
  # essentially a multi-layer perceptron with convolutional and pooling layers
  model: !obj:neon.models.mlp.MLP {
    backend: *be,
    num_epochs: 1,
    batch_size: &bs 128,
    layers: [
      !obj:neon.models.layer.ConvLayer {
        name: layer1,
        backend: *be,
        batch_size: *bs,
        pos: 0,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: layer1lr,
          lr_params: {
            learning_rate: &lr 0.01,
            backend: *be,
            momentum_params: &mm {
              type: linear_monotone, #constant, nesterov
              initial_coef: 0.99,
              start_epoch: 5,
              saturate_epoch: 5,
              saturated_coef: 0.90,
            },
          },
        },
        nifm: 3,
        nofm: 16,
        ifmshape: [*ois, *ois],
        fshape: [4, 4],
        stride: 4,
        weight_init: {
          type: uniform,
          low: -0.1,
          high: 0.1,
        },
      },
      !obj:neon.models.layer.MaxPoolingLayer {
        name: layer2,
        backend: *be,
        batch_size: *bs,
        pos: 1,
        nifm: 16,
        ifmshape: [64, 64],
        fshape: [4, 4],
        stride: 4,
      },
      !obj:neon.models.layer.ConvLayer {
        name: layer3,
        backend: *be,
        batch_size: *bs,
        pos: 2,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: layer3lr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nifm: 16,
        nofm: 32,
        ifmshape: [16, 16],
        fshape: [2, 2],
        stride: 2,
        weight_init: {
          type: uniform,
          low: -0.1,
          high: 0.1,
        },
      },
      !obj:neon.models.layer.MaxPoolingLayer {
        name: layer4,
        backend: *be,
        batch_size: *bs,
        pos: 3,
        nifm: 32,
        ifmshape: [8, 8],
        fshape: [2, 2],
        stride: 2,
      },
      !obj:neon.models.layer.Layer {
        name: layer5,
        backend: *be,
        batch_size: *bs,
        pos: 4,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: layer5lr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nin: 512, # nifm * ((ih - ph) / stride + 1) * ((iw - pw) / stride + 1)
        nout: 500,
        activation: !obj:neon.transforms.rectified.RectLin {},
        weight_init: {
          type: uniform,
          low: -0.1,
          high: 0.1,
        },
      },
      &lastlayer !obj:neon.models.layer.Layer {
        name: output,
        backend: *be,
        batch_size: *bs,
        pos: 5,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: outputlr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nin: 500,
        nout: 1000,
        activation: !obj:neon.transforms.logistic.Logistic {},
        weight_init: {
          type: uniform,
          low: -0.1,
          high: 0.1,
        },
      },
    ],
    cost: !obj:neon.transforms.cross_entropy.CrossEntropy {
      olayer: *lastlayer,
    },
  },
  
  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
