# Experiment settings to train/test a 1 hidden layer Neural Net on full
# MNIST.  Parameters are optimized for performance.

!obj:mylearn.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:mylearn.backends._numpy.Numpy {
    rng_seed: 0,
    # set which numpy issues raise exceptions, warnings, etc.
    # see: numpy.seterr()
    seterr_handling: {
      all: 'warn',
    },
  },
  
  datasets: [
    # MNIST data
    !obj:mylearn.datasets.mnist.MNIST {
      backend: *be,
      repo_path: '/usr/local/data',
      sample_pct: 100,
      serialized_path: '/usr/local/data/MNIST/mnist-Numpy.pkl',
    },
  ],
  
  # simple MLP model specification
  model: !obj:mylearn.models.mlp.MLP {
    backend: *be,
    num_epochs: 60,
    batch_size: &bs 100,
    learning_rate: &lr 0.01,
    momentum: {
      type: linear_monotone, #constant, nesterov
      initial_coef: 0.99,
      start_epoch: 5,
      saturate_epoch: 5,
      saturated_coef: 0.90,
    },
    cost: !obj:mylearn.transforms.cross_entropy.CrossEntropy {},
    serialized_path: './mlp-simple.pkl',
    layers: [
      !obj:mylearn.models.layer.Layer {
        name: h0,
        backend: *be,
        batch_size: *bs,
        pos: 0,
        learning_rate: *lr,
        nin: 785, # input layer + 1 for the bias
        nout: 2000,
        activation: !obj:mylearn.transforms.rectified.RectLin {},
        weight_init: {
          type: normal,
          loc: 0.0,
          scale: 0.01,
        },
      },
      !obj:mylearn.models.layer.Layer {
        name: output,
        backend: *be,
        batch_size: *bs,
        pos: 1,
        learning_rate: *lr,
        nin: 2001, # previous nout + 1 for the bias
        nout: 10,
        activation: !obj:mylearn.transforms.logistic.Logistic {},
        weight_init: {
          type: node_normalized,
          scale: 4.0,
          bias_init: 0.0,
        },
      },
    ],
  },
  
  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 10,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
