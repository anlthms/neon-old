# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
# Experiment settings to train/test a small 1 hidden layer x 100 hidden node
# fully connected feed-forward neural network on the full MNIST dataset.

!obj:experiments.FitPredictErrorExperiment {

  dataset: &ds !obj:datasets.MNIST {
    repo_path: '~/data',
    sample_pct: 100,
  },

  metrics: {
    train: [
      !obj:metrics.MisclassRate {},
    ],
    test: [
      !obj:metrics.MisclassRate {},
    ],
  },

  weight_inits: [
    &wt_init !obj:params.GaussianValGen {
      loc: 0.0,
      scale: 0.01,
      bias_init: 0.0,
    },
    &wt_initb !obj:params.NodeNormalizedValGen {
      scale: 4.0,
      bias_init: 0.0,
    },
  ],

  lrule: [
    &gdm {
      type: gradient_descent_momentum,
      lr_params: {
        learning_rate: 0.1,
        momentum_params: {
          type: constant,
          coef: 0.0,
        },
      },
    },
    &ada {
      type: adadelta,
      lr_params: {
        rho: &ro 0.95,
        epsilon: &eps 0.000001,
      },
    },
  ],
  # simple MLP model specification
  model: !obj:models.MLP {
    num_epochs: 30,
    batch_size: &bs 100,
    layers: [
      &datalayer !obj:layers.DataLayer {
        name: d0,
        nout: 784,
      },
      !obj:layers.FCLayer {
        name: h0,
        nout: 100,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:transforms.RectLin {},
      },
      &lastlayer !obj:layers.FCLayer {
        name: output,
        nout: 10,
        lrule_init: *gdm,
        weight_init: *wt_initb,
        activation: !obj:transforms.Logistic {},
      },
      &costlayer !obj:layers.CostLayer {
        name: cost,
        ref_layer: *datalayer,
        cost: !obj:transforms.CrossEntropy {},
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
