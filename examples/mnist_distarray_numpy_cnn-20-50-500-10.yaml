# Experiment settings to train/test a CNN on MNIST using MPI.

!obj:neon.experiments.fit_predict_err.FitPredictErrorExperiment {
  dist_flag: &df True,
  backend: &be !obj:neon.backends._numpy.Numpy {
    rng_seed: 0,
  },

  datasets: [
    # MNIST data
    !obj:neon.datasets.mnist.MNIST {
      dist_flag: *df,
      backend: *be,
      repo_path: '/usr/local/data',
      sample_pct: 1,
      serialized_path: '/usr/local/data/MNIST/mnist_1pct-Numpy_{rank}.pkl',
    },
  ],

  # CNN model specification
  # essentially a multi-layer perceptron with convolutional and pooling layers
  model: !obj:neon.models.convnet_dist.ConvnetDist {
    backend: *be,
    num_epochs: 2,
    batch_size: &bs 100,
    learning_rate: &lr 0.01,
    momentum: {
      type: linear_monotone, #constant, nesterov
      initial_coef: 0.99,
      start_epoch: 5,
      saturate_epoch: 5,
      saturated_coef: 0.90,
    },
    cost: !obj:neon.transforms.cross_entropy.CrossEntropy {},
    #serialized_path: './cnn-small.pkl',
    layers: [
      !obj:neon.models.layer.ConvLayerDist {
        name: layer1,
        backend: *be,
        batch_size: *bs,
        pos: 0,
        learning_rate: *lr,
        nifm: 1,
        nofm: 20,
        ifmshape: [28, 28],
        fshape: [5, 5],
        stride: 1,
        weight_init: {
          type: uniform,
          low: -0.1,
          high: 0.1,
        },
      },
      !obj:neon.models.layer.MaxPoolingLayerDist {
        name: layer2,
        backend: *be,
        batch_size: *bs,
        pos: 1,
        nifm: 20,
        ifmshape: [24, 24],
        fshape: [2, 2],
        stride: 2,
      },
      !obj:neon.models.layer.ConvLayerDist {
        name: layer3,
        backend: *be,
        batch_size: *bs,
        pos: 2,
        learning_rate: *lr,
        nifm: 20,
        nofm: 50,
        ifmshape: [12, 12],
        fshape: [5, 5],
        stride: 1,
        weight_init: {
          type: uniform,
          low: -0.1,
          high: 0.1,
        },
      },
      !obj:neon.models.layer.MaxPoolingLayerDist {
        name: layer4,
        backend: *be,
        batch_size: *bs,
        pos: 3,
        nifm: 50,
        ifmshape: [8, 8],
        fshape: [2, 2],
        stride: 2,
      },
      # todo: support FC-> FC connections
      !obj:neon.models.layer.LayerWithNoBiasDist {
        name: layer5,
        backend: *be,
        batch_size: *bs,
        pos: 4,
        learning_rate: *lr,
        nin: 800, # nifm * ((ih - ph) / stride + 1) * ((iw - pw) / stride + 1)
        nout: 500,
        activation: !obj:neon.transforms.rectified.RectLin {},
        weight_init: {
          type: uniform,
          low: -0.1,
          high: 0.1,
        },
      },
      !obj:neon.models.layer.LayerWithNoBiasDist {
        name: output,
        backend: *be,
        batch_size: *bs,
        pos: 5,
        learning_rate: *lr,
        nin: 500,
        nout: 10,
        activation: !obj:neon.transforms.logistic.Logistic {},
        weight_init: {
          type: uniform,
          low: -0.1,
          high: 0.1,
        },
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
