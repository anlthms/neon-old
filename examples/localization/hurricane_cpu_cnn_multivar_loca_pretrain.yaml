# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
# Small convolutional net for hurricane patches. FC layers written as conv.
# Pretraining step for localization experiment.

!obj:experiments.FitPredictErrorExperiment {

  dataset: !obj:datasets.Hurricane {
      repo_path: '/home/users/urs/data_hard',
      hdf5_file: 'hurricanes.h5',
      # variables: [0],  # used in singlevar case
      crop: 16,  # train on a smaller center region.
      training_size: 10000,
      test_size: 10000,
      fill_classes: 6,  # empty classes to be divisible by 8
  },

  weight_inits: [
    &wt_init !obj:params.UniformValGen {
      low: -0.1,
      high: 0.1,
    },
  ],

  lrules: [
      &gdm {
        type: gradient_descent_momentum,
        lr_params: {
          learning_rate: 0.01,
          momentum_params: {
            type: constant, # linear_monotone, nesterov
            coef: 0.90,
          },
        },
      },
  ],

  # CNN model specification
  # MLPL inherits everything from MLPB, but later on we will use extra
  # localization features from this subclass.
  model: !obj:models.MLPL {
    num_epochs: 5,
    batch_size: &bs 128,
    #serialized_path: './hurr16features.pkl',  # check util/persist for overwrite_param
    layers: [
      &datalayer !obj:layers.DataLayer {
        name: d0,
        is_local: True,
        nofm: 8, # feature maps in the data
        ofmshape: [16, 16],
      },
      !obj:layers.ConvLayer {
        name: layer1,
        nofm: 16,
        fshape: [5, 5],
        stride: 1,
        lrule_init: *gdm,
        weight_init: *wt_init,
      },
      !obj:layers.PoolingLayer {
        name: layer2,
        op: 'max',
        fshape: [2, 2],
        stride: 2,
      },
      !obj:layers.ConvLayer {
        name: layer3,
        nofm: 16,
        fshape: [5, 5],
        stride: 1,
        lrule_init: *gdm,
        weight_init: *wt_init,
      },
      !obj:layers.PoolingLayer {
        name: layer4,
        op: 'max',
        fshape: [2, 2],
        stride: 2,
      },
      !obj:layers.ConvLayer { # was FCLayer, now 1x1 convolution
        name: layer5,
        nofm: 16,
        fshape: [1, 1],
        stride: 1,
        activation: !obj:neon.transforms.rectified.RectLin {},
        lrule_init: *gdm,
        weight_init: *wt_init,
      },
      !obj:layers.ConvLayer { # was FCLayer
        name: output,
        nofm: 8, # target classes. for GPU, 6 empty classed to divisible by 8
        fshape: [1, 1],
        stride: 1,
        activation: !obj:transforms.Logistic {},
        lrule_init: *gdm,
        weight_init: *wt_init,
      },
      &costlayer !obj:layers.CostLayer {
        name: cost,
        ref_layer: *datalayer,
        cost: !obj:transforms.CrossEntropy {},
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
