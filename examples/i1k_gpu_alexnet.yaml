# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
# Experiment settings to train/test the AlexNet CNN on ImageNet.

!obj:neon.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:neon.backends.gpu.GPU {
    rng_seed: 0,
  },
  
  datasets: [
    # MNIST data
    !obj:neon.datasets.i1k.I1K {
      backend: *be,
      load_path: '/usr/local/data', #directory where .tar files are stored
      repo_path: '/usr/local/data', #directory to use for writing files
      serialized_path: '/usr/local/data/I1K/I1K_alexnet.pkl', #delete if loading files from scratch
      sample_pct: .1, #ignored for now
      macro_batched: True,
      # macro batch start and end indices for train and val datasets
      #need #macro batches * OUTPUT_BATCH_SIZE to divide nrecs
      start_train_batch: 0,
      end_train_batch: 0,
      start_val_batch: 0,
      end_val_batch: 0,
    },
  ],

  # CNN model specification
  # essentially a multi-layer perceptron with convolutional and pooling layers
  model: !obj:neon.models.mlp.MLP {
    backend: *be,
    num_epochs: 2,
    batch_size: &bs 128,
    cost: !obj:neon.transforms.cross_entropy.CrossEntropy {},
    layers: [
      !obj:neon.models.layer.ConvLayer {
        name: conv1,
        backend: *be,
        batch_size: *bs,
        pos: 0,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: layer1lr,
          lr_params: {
            learning_rate: &lr 0.01,
            backend: *be,
            momentum_params: &mm {
              type: linear_monotone, #constant, nesterov
              initial_coef: 0.90,
              start_epoch: 5,
              saturate_epoch: 5,
              saturated_coef: 0.99,
            },
          },
        },
        nifm: 3,
        nofm: 64,
        ifmshape: [224, 224],
        fshape: [11, 11],
        stride: 4,
        weight_init: {
          type: uniform,
          low: -0.01,
          high: 0.01,
        },
      },
      !obj:neon.models.layer.CrossMapResponseNormLayer {
        name: rnorm1,
        backend: *be,
        batch_size: *bs,
        pos: 1,
        ifmshape: [55, 55],
        nifm: 64,
        ksize: 5,
        alpha: 0.0001, # todo: double check this with alex
        beta: 0.75,
      },
      !obj:neon.models.layer.MaxPoolingLayer {
        name: pool1,
        backend: *be,
        batch_size: *bs,
        pos: 2,
        nifm: 64,
        ifmshape: [55, 55],
        fshape: [3, 3],
        stride: 2,
      },
      !obj:neon.models.layer.ConvLayer {
        name: conv2,
        backend: *be,
        batch_size: *bs,
        pos: 3,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: layer2lr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nifm: 64,
        nofm: 192,
        ifmshape: [27, 27],
        fshape: [5, 5],
        stride: 1,
        pad: 2,
        activation: !obj:neon.transforms.rectified.RectLin {},
        weight_init: {
          type: uniform,
          low: -0.01,
          high: 0.01,
        },
      },
      !obj:neon.models.layer.CrossMapResponseNormLayer {
        name: rnorm2,
        backend: *be,
        batch_size: *bs,
        pos: 4,
        ifmshape: [27, 27],
        nifm: 192,
        ksize: 5,
        alpha: 0.0001,
        beta: 0.75,
      },
      !obj:neon.models.layer.MaxPoolingLayer {
        name: pool2,
        backend: *be,
        batch_size: *bs,
        pos: 5,
        nifm: 192,
        ifmshape: [27, 27],
        fshape: [3, 3],
        stride: 2,
      },
      !obj:neon.models.layer.ConvLayer {
        name: conv3,
        backend: *be,
        batch_size: *bs,
        pos: 6,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: layer3lr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nifm: 192,
        nofm: 384,
        ifmshape: [13, 13],
        fshape: [3, 3],
        stride: 1,
        pad: 1,
        activation: !obj:neon.transforms.rectified.RectLin {},
        weight_init: {
          type: uniform,
          low: -0.01,
          high: 0.01,
        },
      },
      !obj:neon.models.layer.ConvLayer {
        name: conv4,
        backend: *be,
        batch_size: *bs,
        pos: 7,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: layer3lr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nifm: 384,
        nofm: 256,
        ifmshape: [13, 13],
        fshape: [3, 3],
        stride: 1,
        pad: 1,
        activation: !obj:neon.transforms.rectified.RectLin {},
        weight_init: {
          type: uniform,
          low: -0.01,
          high: 0.01,
        },
      },
      !obj:neon.models.layer.ConvLayer {
        name: conv5,
        backend: *be,
        batch_size: *bs,
        pos: 8,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: layer3lr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nifm: 256,
        nofm: 256,
        ifmshape: [13, 13],
        fshape: [3, 3],
        stride: 1,
        pad: 1,
        weight_init: {
          type: uniform,
          low: -0.01,
          high: 0.01,
        },
      },
      !obj:neon.models.layer.MaxPoolingLayer {
        name: pool3,
        backend: *be,
        batch_size: *bs,
        pos: 9,
        nifm: 256,
        ifmshape: [13, 13],
        fshape: [3, 3],
        stride: 2,
      },
      !obj:neon.models.layer.LayerWithNoBias {
        name: fc4096a,
        backend: *be,
        batch_size: *bs,
        pos: 10,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: layer5lr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nin: 9216, # nifm * ((ih - ph) / stride + 1) * ((iw - pw) / stride + 1)
        nout: 4096,
        activation: !obj:neon.transforms.rectified.RectLin {},
        weight_init: {
          type: uniform,
          low: -0.01,
          high: 0.01,
        },
      },
      !obj:neon.models.layer.DropOutLayer {
        name: dropout1,
        backend: *be,
        batch_size: *bs,
        keep: 0.5,
        pos: 11,
        nin: 4096,
      },
      !obj:neon.models.layer.LayerWithNoBias {
        name: fc4096b,
        backend: *be,
        batch_size: *bs,
        pos: 12,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: layer5lr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nin: 4096, # nifm * ((ih - ph) / stride + 1) * ((iw - pw) / stride + 1)
        nout: 4096,
        activation: !obj:neon.transforms.rectified.RectLin {},
        weight_init: {
          type: uniform,
          low: -0.01,
          high: 0.01,
        },
      },
      !obj:neon.models.layer.DropOutLayer {
        name: dropout2,
        backend: *be,
        batch_size: *bs,
        keep: 0.5,
        pos: 13,
        nin: 4096,
      },
      !obj:neon.models.layer.LayerWithNoBias {
        name: fc1000,
        backend: *be,
        batch_size: *bs,
        pos: 14,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: outputlr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nin: 4096,
        nout: 1000,
        # todo this needs to be softmax
        activation: !obj:neon.transforms.logistic.Logistic {},
        weight_init: {
          type: uniform,
          low: -0.01,
          high: 0.01,
        },
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}