# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
# Experiment settings to train/test the AlexNet CNN on ImageNet.

!obj:neon.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:neon.backends.gpu.GPU {
    rng_seed: 0,
  },

  dataset: &ds !obj:neon.datasets.i1k.I1K {
    backend: *be,
    load_path: '/usr/local/data', #directory where .tar files are stored
    repo_path: '/usr/local/data', #directory to use for writing files
    # serialized_path: '/usr/local/data/I1K/I1K_alexnet.pkl', #delete if loading files from scratch
    # sample_pct: .1, #ignored for now
    macro_batched: True,
    output_image_size: &ois 224,
    max_tar_file: 4,
    output_batch_size: 3072,
    # macro batch start and end indices for train and val datasets
    #need #macro batches * OUTPUT_BATCH_SIZE to divide nrecs
    start_train_batch: 0,
    end_train_batch: 0,
    start_val_batch: 0,
    end_val_batch: 0,
  },

  weight_inits: &wt_init {
    type: uniform,
    low: -0.1,
    high: 0.1,
  },

  lrule: &gdm {
    type: gradient_descent_momentum,
    lr_params: {
      learning_rate: 0.01,
      backend: *be,
      momentum_params: {
        type: linear_monotone, #constant, nesterov
        initial_coef: 0.90,
        start_epoch: 5,
        saturate_epoch: 5,
        saturated_coef: 0.99,
      },
    },
  },

  model: !obj:neon.models.mlp.MLPB {
    backend: *be,
    num_epochs: 2,
    batch_size: &bs 128,
    layers: [
      &datalayer !obj:neon.models.layer2.DataLayer {
        name: d0,
        dataset: *ds,
        is_local: True,
        nofm: 3,
        ofmshape: [*ois, *ois],
      },
      !obj:neon.models.layer2.ConvLayer {
        name: conv1,
        lrule_init: *gdm,
        weight_init: *wt_init,
        nofm: 64,
        fshape: [11, 11],
        stride: 4,
      },
      !obj:neon.models.layer2.CrossMapResponseNormLayer {
        name: rnorm1,
        ksize: 5,
        alpha: 0.0001, # todo: double check this with alex
        beta: 0.75,
      },
      !obj:neon.models.layer2.PoolingLayer {
        name: pool1,
        op: 'max',
        fshape: [3, 3],
        stride: 2,
      },
      !obj:neon.models.layer2.ConvLayer {
        name: conv2,
        lrule_init: *gdm,
        weight_init: *wt_init,
        nofm: 192,
        fshape: [5, 5],
        pad: 2,
        activation: !obj:neon.transforms.rectified.RectLin {},
      },
      !obj:neon.models.layer2.CrossMapResponseNormLayer {
        name: rnorm2,
        ksize: 5,
        alpha: 0.0001,
        beta: 0.75,
      },
      !obj:neon.models.layer2.PoolingLayer {
        name: pool2,
        op: 'max',
        fshape: [3, 3],
        stride: 2,
      },
      !obj:neon.models.layer2.ConvLayer {
        name: conv3,
        lrule_init: *gdm,
        weight_init: *wt_init,
        nofm: 384,
        fshape: [3, 3],
        pad: 1,
        activation: !obj:neon.transforms.rectified.RectLin {},
      },
      !obj:neon.models.layer2.ConvLayer {
        name: conv4,
        lrule_init: *gdm,
        weight_init: *wt_init,
        nofm: 256,
        fshape: [3, 3],
        pad: 1,
        activation: !obj:neon.transforms.rectified.RectLin {},
      },
      !obj:neon.models.layer2.ConvLayer {
        name: conv5,
        lrule_init: *gdm,
        weight_init: *wt_init,
        nofm: 256,
        fshape: [3, 3],
        pad: 1,
      },
      !obj:neon.models.layer2.PoolingLayer {
        name: pool3,
        op: 'max',
        fshape: [3, 3],
        stride: 2,
      },
      !obj:neon.models.layer2.FCLayer {
        name: fc4096a,
        lrule_init: *gdm,
        weight_init: *wt_init,
        nout: 4096,
        activation: !obj:neon.transforms.rectified.RectLin {},
      },
      !obj:neon.models.layer2.DropOutLayer {
        name: dropout1,
        keep: 0.5,
      },
      !obj:neon.models.layer2.FCLayer {
        name: fc4096b,
        lrule_init: *gdm,
        weight_init: *wt_init,
        nout: 4096,
        activation: !obj:neon.transforms.rectified.RectLin {},
      },
      !obj:neon.models.layer2.DropOutLayer {
        name: dropout2,
        keep: 0.5,
      },
      &lastlayer !obj:neon.models.layer2.FCLayer {
        name: fc1000,
        lrule_init: *gdm,
        weight_init: *wt_init,
        nout: 1000,
        activation: !obj:neon.transforms.softmax.Softmax {},
      },
      &costlayer !obj:neon.models.layer2.CostLayer {
        name: cost,
        ref_layer: *datalayer,
        cost: !obj:neon.transforms.cross_entropy.CrossEntropy {},
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
