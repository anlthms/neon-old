# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
# Experiment settings to train a stacked autoencoder on MNIST.

!obj:neon.experiments.fit.FitExperiment {
  backend: &be !obj:neon.backends.gpu.GPU {
    rng_seed: 0,
  },

  dataset: &ds !obj:neon.datasets.mnist.MNIST {
    backend: *be,
    repo_path: '/usr/local/data',
    sample_pct: 100,
  },

  weight_inits: [
    &wt_init !obj:params.GaussianValGen {
      backend: *be,
      scale: 0.1,
    },
  ],

  lrule: &gdm {
    type: gradient_descent_momentum,
    lr_params: {
      learning_rate: &lr 0.0001,
      backend: *be,
      momentum_params: &mm {
        type: constant, # linear_monotone, nesterov
        coef: 0.90,
      },
    },
  },

  # Autoencoder model specification
  model: !obj:neon.models.mlp.MLPB {
    backend: *be,
    num_epochs: 60,
    batch_size: &bs 100,
    # serialized_path: './ae-cudanet.pkl',
    layers: [
      &datalayer !obj:neon.models.layer2.DataLayer {
        name: d0,
        nout: 784,
      },
      !obj:neon.models.layer2.FCLayer {
        name: enc1,
        nout: 1000,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:neon.transforms.logistic.Logistic {},
      },
      !obj:neon.models.layer2.FCLayer {
        name: enc2,
        nout: 500,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:neon.transforms.logistic.Logistic {},
      },
      !obj:neon.models.layer2.FCLayer {
        name: enc3,
        nout: 250,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:neon.transforms.logistic.Logistic {},
      },
      !obj:neon.models.layer2.FCLayer {
        name: enc4,
        nout: 30,
        lrule_init: *gdm,
        weight_init: *wt_init,
      },
      !obj:neon.models.layer2.FCLayer {
        name: dec1,
        nout: 250,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:neon.transforms.logistic.Logistic {},
      },
      !obj:neon.models.layer2.FCLayer {
        name: dec2,
        nout: 500,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:neon.transforms.logistic.Logistic {},
      },
      !obj:neon.models.layer2.FCLayer {
        name: dec3,
        nout: 1000,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:neon.transforms.logistic.Logistic {},
      },
      &lastlayer !obj:neon.models.layer2.FCLayer {
        name: dec4,
        nout: 784,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:neon.transforms.logistic.Logistic {},
      },
      &costlayer !obj:neon.models.layer2.CostLayer {
        name: cost,
        ref_layer: *datalayer,
        ref_label: output,
        cost: !obj:neon.transforms.cross_entropy.CrossEntropy {},
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
