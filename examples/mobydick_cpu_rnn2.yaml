# Experiment settings to train/test a small 1 hidden layer Neural Net on full
# MNIST.

!obj:neon.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:neon.backends.cpu.CPU {
    rng_seed: 0,
    seterr_handling: {
      all: 'warn', #  'warn' or 'raise'
      over: 'raise',
    },
  },

  dataset: &ds !obj:neon.datasets.mobydick.MOBYDICK {
    backend: *be,
    repo_path: '/usr/local/data',
    sample_pct: 10, # 10% gives 400 batches like in rnn2
    data_dim: &dd 128,
    unrolls: &ur 5,
  },

  weight_inits: [
    &wt_init !obj:params.SparseEigenValGen {
      backend: *be,
      sparseness: 15,
      eigenvalue: 1.2,
    },
    &wt_initb !obj:params.NormalValGen {
      backend: *be,
      loc: 0.0,
      scale: 0.1,
    },
  ],

  lrule: &gdm {
    type: gradient_descent_momentum,
    lr_params: {
      learning_rate: 0.2,  #  0.002 for RNN,
      backend: *be,
      momentum_params: {
        type: linear_monotone, # constant, nesterov dont work
        initial_coef: 0.9,
        saturated_coef: 0.99,
        start_epoch: 10,
        saturate_epoch: 100,
      },
    },
  },

  # simple RNN model specification
  model: !obj:neon.models.rnn.RNNB {
    backend: *be,
    num_epochs: 10,
    batch_size: &bs 50,
    reset_period: 50,
    unrolls: *ur,
    make_plots: True,
    shortcut_deriv: False,
    layers: [
      &datalayer !obj:neon.models.layer2.DataLayer {
        name: d0,
        nout: 128,
      },
      !obj:neon.models.rlayer2.RecurrentLSTMLayer {  # RecurrentHiddenLayer RecurrentLSTMLayer
        name: recurrent,
        lrule_init: *gdm,
        nout: 64,
        unrolls: *ur,
        activation: !obj:neon.transforms.tanh.Tanh {},
        gate_activation: !obj:neon.transforms.logistic.Logistic {},
        weight_init: *wt_init,
        weight_init_rec: *wt_init,
      },

      &lastlayer !obj:neon.models.rlayer2.RecurrentOutputLayer {
        name: output,
        lrule_init: *gdm,
        nout: 128,
        unrolls: *ur,
        activation: !obj:neon.transforms.logistic.Logistic {},
        weight_init: *wt_init,
      },

      &costlayer !obj:neon.models.rlayer2.RecurrentCostLayer {
        name: cost,
        ref_layer: *datalayer,
        cost: !obj:neon.transforms.cross_entropy.CrossEntropy {},
      },
    ],
  },

  logging: {
    level: 10,  # 10 debug, 20 info, 30 warning
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
