# MLP on CIFAR-10

!obj:mylearn.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:mylearn.backends._numpy.Numpy {
    rng_seed: 0,
  },

  datasets: [
    !obj:mylearn.datasets.cifar10.CIFAR10 {
      backend: *be,
      repo_path: '/usr/local/data',
      sample_pct: 10,
      serialized_path: '/usr/local/data/CIFAR10/cifar10_10pct-Numpy.pkl',
    },
  ],

  # simple MLP model specification
  model: !obj:mylearn.models.mlp.MLP {
    backend: *be,
    num_epochs: 100,
    batch_size: &bs 100,
    learning_rate: &lr 0.01,
    momentum: {
      type: linear_monotone,
      initial_coef: 0.99,
      start_epoch: 5,
      saturate_epoch: 5,
      saturated_coef: 0.90,
    },
    cost: !obj:mylearn.transforms.cross_entropy.CrossEntropy {},
    layers: [
      !obj:mylearn.models.layer.LayerWithNoBias {
        name: h0,
        backend: *be,
        batch_size: *bs,
        pos: 0,
        learning_rate: *lr,
        nin: 3072,
        nout: 200,
        activation: !obj:mylearn.transforms.rectified.RectLin {},
        weight_init: {
          type: uniform,
          low: -0.1,
          high: 0.1,
        },
      },
      !obj:mylearn.models.layer.LayerWithNoBias {
        name: output,
        backend: *be,
        batch_size: *bs,
        pos: 1,
        learning_rate: *lr,
        nin: 200,
        nout: 10,
        activation: !obj:mylearn.transforms.logistic.Logistic {},
        weight_init: {
          type: uniform,
          low: -0.1,
          high: 0.1,
        },
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
