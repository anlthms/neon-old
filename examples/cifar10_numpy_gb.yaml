# Experiment settings to train/test a "Google Brain" style sparse autoencoder
# model on CIFAR10.

!obj:mylearn.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:mylearn.backends._numpy.Numpy {
    rng_seed: 0,
  },

  datasets: [
    # CIFAR10 data
    !obj:mylearn.datasets.cifar10.CIFAR10 {
      backend: *be,
      repo_path: '/usr/local/data',
      sample_pct: 10,
      serialized_path: '/usr/local/data/CIFAR10/cifar10_10pct-Numpy.pkl',
    },
  ],

  # Google Brain model specification
  model: !obj:mylearn.models.gb.GB {
    num_epochs: 4,
    num_pretrain_epochs: 10,
    batch_size: &bs 100,
    learning_rate: &lr 0.1,
    pretraining: &pt True,
    sparsity: &sp 0.1,
    pretrain_learning_rate: &plr 0.001,
    tied_weights: &tw True,
    visualize: False,
    momentum: {
      type: linear_monotone,
      initial_coef: 0.99,
      start_epoch: 5,
      saturate_epoch: 5,
      saturated_coef: 0.90,
    },
    pretrain_cost: !obj:mylearn.transforms.sum_squared.SumSquaredDiffs {},
    cost: !obj:mylearn.transforms.cross_entropy.CrossEntropy {},
    layers: [
      !obj:mylearn.models.layer.LocalFilteringLayer {
        name: layer0,
        pretraining: *pt,
        sparsity: *sp,
        backend: *be,
        batch_size: *bs,
        pos: 0,
        learning_rate: *lr,
        pretrain_learning_rate: *plr,
        tied_weights: *tw,
        nifm: 3,
        nofm: 8,
        ifmshape: [32, 32],
        fshape: [6, 6],
        stride: 1,
        weight_init: {
          type: uniform,
          low: -0.1,
          high: 0.1,
        },
      },
      !obj:mylearn.models.layer.L2PoolingLayer {
        name: layer1,
        backend: *be,
        batch_size: *bs,
        pos: 1,
        nfm: 8,
        ifmshape: [27, 27],
        pshape: [5, 5],
        stride: 1,
      },
      !obj:mylearn.models.layer.LCNLayer {
        name: layer2,
        backend: *be,
        batch_size: *bs,
        pos: 2,
        nfm: 8,
        ifmshape: [23, 23],
        fshape: [3, 3],
        stride: 1,
      },
      !obj:mylearn.models.layer.LocalFilteringLayer {
        name: layer3,
        pretraining: *pt,
        sparsity: *sp,
        backend: *be,
        batch_size: *bs,
        pos: 3,
        learning_rate: *lr,
        pretrain_learning_rate: *plr,
        tied_weights: *tw,
        nifm: 8,
        nofm: 8,
        ifmshape: [23, 23],
        fshape: [6, 6],
        stride: 1,
        weight_init: {
          type: uniform,
          low: -0.1,
          high: 0.1,
        },
      },
      !obj:mylearn.models.layer.L2PoolingLayer {
        name: layer4,
        backend: *be,
        batch_size: *bs,
        pos: 4,
        nfm: 8,
        ifmshape: [18, 18],
        pshape: [5, 5],
        stride: 1,
      },
      !obj:mylearn.models.layer.LCNLayer {
        name: layer5,
        backend: *be,
        batch_size: *bs,
        pos: 5,
        nfm: 8,
        ifmshape: [14, 14],
        fshape: [3, 3],
        stride: 1,
      },
      !obj:mylearn.models.layer.LocalFilteringLayer {
        name: layer6,
        pretraining: *pt,
        sparsity: *sp,
        backend: *be,
        batch_size: *bs,
        pos: 6,
        learning_rate: *lr,
        pretrain_learning_rate: *plr,
        tied_weights: *tw,
        nifm: 8,
        nofm: 8,
        ifmshape: [14, 14],
        fshape: [6, 6],
        stride: 1,
        weight_init: {
          type: uniform,
          low: -0.1,
          high: 0.1,
        },
      },
      !obj:mylearn.models.layer.L2PoolingLayer {
        name: layer7,
        backend: *be,
        batch_size: *bs,
        pos: 7,
        nfm: 8,
        ifmshape: [9, 9],
        pshape: [5, 5],
        stride: 1,
      },
      !obj:mylearn.models.layer.LCNLayer {
        name: layer8,
        backend: *be,
        batch_size: *bs,
        pos: 8,
        nfm: 8,
        ifmshape: [5, 5],
        fshape: [3, 3],
        stride: 1,
      },
      !obj:mylearn.models.layer.LayerWithNoBias {
        name: output,
        backend: *be,
        batch_size: *bs,
        pos: 9,
        learning_rate: *lr,
        nin: 200, # previous nout (nifm * ifmshape[0] * ifmshape[1])
        nout: 10,
        activation: !obj:mylearn.transforms.logistic.Logistic {},
        weight_init: {
          type: uniform,
          low: -0.1,
          high: 0.1,
        },
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  logging: {
    level: 10,  #logging.DEBUG == 10
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
