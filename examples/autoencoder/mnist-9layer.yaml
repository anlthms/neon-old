# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------
# Experiment settings to train a stacked autoencoder on MNIST.

!obj:experiments.FitExperiment {

  dataset: &ds !obj:datasets.MNIST {
    repo_path: '~/data',
    sample_pct: 100,
  },

  weight_inits: [
    &wt_init !obj:params.GaussianValGen {
      scale: 0.1,
    },
  ],

  lrule: &gdm {
    type: gradient_descent_momentum,
    lr_params: {
      learning_rate: &lr 0.0001,
      momentum_params: &mm {
        type: constant, # linear_monotone, nesterov
        coef: 0.90,
      },
    },
  },

  # Autoencoder model specification
  model: !obj:models.MLP {
    num_epochs: 60,
    batch_size: &bs 100,
    layers: [
      &datalayer !obj:layers.DataLayer {
        name: d0,
        nout: 784,
      },
      !obj:layers.FCLayer {
        name: enc1,
        nout: 1000,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:transforms.Logistic {},
      },
      !obj:layers.FCLayer {
        name: enc2,
        nout: 500,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:transforms.Logistic {},
      },
      !obj:layers.FCLayer {
        name: enc3,
        nout: 250,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:transforms.Logistic {},
      },
      !obj:layers.FCLayer {
        name: enc4,
        nout: 30,
        lrule_init: *gdm,
        weight_init: *wt_init,
      },
      !obj:layers.FCLayer {
        name: dec1,
        nout: 250,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:transforms.Logistic {},
      },
      !obj:layers.FCLayer {
        name: dec2,
        nout: 500,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:transforms.Logistic {},
      },
      !obj:layers.FCLayer {
        name: dec3,
        nout: 1000,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:transforms.Logistic {},
      },
      &lastlayer !obj:layers.FCLayer {
        name: dec4,
        nout: 784,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:transforms.Logistic {},
      },
      &costlayer !obj:layers.CostLayer {
        name: cost,
        ref_layer: *datalayer,
        ref_label: output,
        cost: !obj:transforms.CrossEntropy {},
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
