# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------

!obj:experiments.FitPredictErrorExperiment {
  inference_sets: ['validation', 'train'],

  dataset: &ds !obj:datasets.Imageset {
    repo_path: '~/data',
    imageset: 'NDSB',
    square_crop: True,
    image_dir: '~/data/NDSB/train',
    save_dir: '~/data/NDSB/batches',
    output_image_size: &ois 128,
    cropped_image_size: &cis 64,
    macro_size: 1024,
    num_channels: 1,
  },

  metrics: {
    train: [
      !obj:metrics.MisclassPercentage {},
    ],
    test: [
      !obj:metrics.MisclassPercentage {},
    ],
  },

  weight_init: &wt_init !obj:params.UniformValGen {
    low: -0.1,
    high: 0.1,
  },

  lrules: [
      &ada {
        type: adadelta,
        lr_params: {
          rho: &ro 0.99,
          epsilon: &eps 0.0000001,
        },
      },
  ],

  # CNN model specification
  # essentially a multi-layer perceptron with convolutional and pooling layers
  model: !obj:models.MLP {
    num_epochs: 20,
    batch_size: &bs 128,
    serialized_path: '~/data/NDSB/ndsb-model.prm',
    layers: [
      &datalayer !obj:layers.ImageDataLayer {
        name: d0,
        is_local: True,
        nofm: 1,
        ofmshape: [64, 64],
      },
      !obj:layers.ConvLayer {
        name: conv,
        activation: !obj:transforms.RectLin {},
        nofm: 128,
        fshape: [5, 5],
        stride: 2,
        # pad: 2,
        lrule_init: *ada,
        weight_init: *wt_init,
      },
      !obj:layers.PoolingLayer {
        name: mpool,
        op: 'max',
        fshape: [2, 2],
        stride: 2,
      },
      !obj:layers.ConvLayer {
        name: conv,
        activation: !obj:transforms.RectLin {},
        nofm: 256,
        fshape: [3, 3],
        stride: 1,
        # pad: 1,
        lrule_init: *ada,
        weight_init: *wt_init,
      },
      !obj:layers.PoolingLayer {
        name: mpool,
        op: 'max',
        fshape: [2, 2],
        stride: 2,
      },
      !obj:layers.ConvLayer {
        name: conv,
        activation: !obj:transforms.RectLin {},
        nofm: 512,
        fshape: [2, 2],
        stride: 1,
        # pad: 1,
        lrule_init: *ada,
        weight_init: *wt_init,
      },
      !obj:layers.PoolingLayer {
        name: mpool,
        op: 'max',
        fshape: [2, 2],
        stride: 2,
      },
      !obj:layers.FCLayer {
        name: fc,
        nout: 1024,
        activation: !obj:transforms.RectLin {},
        lrule_init: *ada,
        weight_init: *wt_init,
      },
      !obj:layers.DropOutLayer {
        name: dropout,
        keep: 0.4,
      },
      !obj:layers.FCLayer {
        name: fc,
        nout: 512,
        activation: !obj:transforms.RectLin {},
        lrule_init: *ada,
        weight_init: *wt_init,
      },
      !obj:layers.DropOutLayer {
        name: dropout,
        keep: 0.5,
      },
      &lastlayer !obj:layers.FCLayer {
        name: output,
        nout: 121,
        activation: !obj:transforms.Softmax {},
        lrule_init: *ada,
        weight_init: *wt_init,
      },
      &costlayer !obj:layers.CostLayer {
        name: cost,
        ref_layer: *datalayer,
        ref_label: 'labels',
        cost: !obj:transforms.CrossEntropy {},
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
