# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
# Experiment settings to train/test a 1 hidden layer Neural Net on full
# MNIST. Network archetecture matches Arjun's Matlab variant.

!obj:neon.experiments.fit_predict_err.FitPredictErrorExperiment {
  dist_flag: &df True,
  backend: &be !obj:neon.backends.cpu.CPU {
    rng_seed: 0,
    seterr_handling: {
      all: 'warn',
    },
  },

  dataset: !obj:neon.datasets.mnist.MNIST {
    dist_flag: *df,
    dist_mode: 'vecpar', # FC split
    backend: *be,
    repo_path: '/usr/local/data',
    sample_pct: 100,
    serialized_path: '/usr/local/data/MNIST_{size}/mnist-Cpu_{rank}.pkl',
  },

  # simple MLP model specification
  model: !obj:neon.models.mlp_dist.MLPDist {
    backend: *be,
    num_epochs: 30,
    batch_size: &bs 100,
    learning_rate: &lr 0.1,
    # serialized_path: './mlp-numpysml-simple.pkl',
    layers: [
      !obj:neon.models.layer.LayerDist {
        name: h0,
        backend: *be,
        batch_size: *bs,
        pos: 0,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: h0lr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: &mm {
              type: constant, #constant, nesterov
              initial_coef: 0.90,
            },
          },
        },
        nin: 784,
        nout: 100,
        activation: !obj:neon.transforms.rectified.RectLin {},
        weight_init: {
          type: normal,
          loc: 0.0,
          scale: 0.01,
          bias_init: 0.0,
        },
      },
      &lastlayer !obj:neon.models.layer.LayerDist {
        name: output,
        backend: *be,
        batch_size: *bs,
        pos: 1,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: outputlr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nin: 100,
        nout: 10,
        activation: !obj:neon.transforms.logistic.Logistic {
          shortcut_deriv: True,
        },
        weight_init: {
          type: node_normalized,
          scale: 4.0,
          bias_init: 0.0,
        },
      },
    ],
    cost: !obj:neon.transforms.cross_entropy.CrossEntropy {
      olayer: *lastlayer,
    },
  },
  
  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
