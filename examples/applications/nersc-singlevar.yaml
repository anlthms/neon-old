# Small convolutional net for hurricane patches.

!obj:experiments.FitPredictErrorExperiment {

  dataset: !obj:datasets.Hurricane {
      repo_path: '/mnt/data/nersc/hurricane/',
      hdf5_file: 'hurricanes.h5',
      variables: [0],
      training_size: 1000,
      test_size: 1000
  },
  
  weight_inits: [
    &wt_init !obj:params.UniformValGen {
      low: -0.1,
      high: 0.1,
    },
  ],

  lrules: [
      &gdm {
        type: gradient_descent_momentum,
        lr_params: {
          learning_rate: 0.01,
          momentum_params: {
            type: constant, # linear_monotone, nesterov
            coef: 0.90,
          },
        },
      },
  ],

  # CNN model specification
  # essentially a multi-layer perceptron with convolutional and pooling layers
  model: !obj:models.MLP {
    num_epochs: 5,
    batch_size: &bs 100,
    # serialized_path: './cnn-small.pkl',
    layers: [
      &datalayer !obj:layers.DataLayer {
        name: d0,
        is_local: True,
        nofm: 1, # Must match the number of variables.
        ofmshape: [32, 32],
      },
      !obj:layers.ConvLayer {
        name: layer1,
        nofm: 16,
        ifmshape: [32, 32],
        fshape: [5, 5],
        stride: 1,
        lrule_init: *gdm,
        weight_init: *wt_init,
      },
      !obj:layers.PoolingLayer {
        name: layer2,
        op: 'max',
        fshape: [2, 2],
        stride: 2,
      },
      !obj:layers.ConvLayer {
        name: layer3,
        nofm: 16,
        fshape: [5, 5],
        stride: 1,
        lrule_init: *gdm,
        weight_init: *wt_init,
      },
      !obj:layers.PoolingLayer {
        name: layer4,
        op: 'max',
        fshape: [2, 2],
        stride: 2,
      },
      !obj:layers.FCLayer {
        name: layer5,
        nout: 10,
        activation: !obj:transforms.RectLin {},
        lrule_init: *gdm,
        weight_init: *wt_init,
      },
      !obj:layers.FCLayer {
        name: output,
        nout: 2,
        activation: !obj:transforms.Logistic {},
        lrule_init: *gdm,
        weight_init: *wt_init,
      },
      &costlayer !obj:layers.CostLayer {
        name: cost,
        ref_layer: *datalayer,
        cost: !obj:transforms.CrossEntropy {},
      },
    ],
  },
  
  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
