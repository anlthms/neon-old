# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.  All rights reserved.
# ----------------------------------------------------------------------------
# Experiment settings to train/test a CNN on MNIST.

!obj:neon.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:neon.backends.cpu.CPU {
    rng_seed: 0,
  },

  # MNIST data
  dataset: &ds !obj:neon.datasets.mnist.MNIST {
    backend: *be,
    repo_path: '/usr/local/data',
    sample_pct: 10,
  },

  weight_init: &wt_init {
    type: uniform,
    low: -0.1,
    high: 0.1,
  },

  lrules: [
    &gd {
      type: gradient_descent,
      lr_params: {
        learning_rate: 0.01,
        backend: *be,
      },
    },
    &gdm {
      type: gradient_descent_momentum,
      lr_params: {
        learning_rate: 0.01,
        backend: *be,
        momentum_params: {
          type: constant, # linear_monotone, nesterov
          coef: 0.90,
        },
      },
    },
  ],
  # CNN model specification
  # essentially a multi-layer perceptron with convolutional and pooling layers
  model: !obj:neon.models.mlp.MLPB {
    backend: *be,
    num_epochs: 2,
    batch_size: &bs 100,
    layers: [
      &datalayer !obj:neon.models.layer2.DataLayer {
        name: d0,
        dataset: *ds,
        nout: 784,
      },
      !obj:neon.models.layer2.ConvLayer {
        name: layer1,
        nofm: 20,
        fshape: [5, 5],
        lrule_init: *gd,
        weight_init: *wt_init,
      },
      !obj:neon.models.layer2.PoolingLayer {
        name: layer2,
        op: 'max',
        fshape: [2, 2],
        stride: 2,
      },
      !obj:neon.models.layer2.ConvLayer {
        name: layer3,
        nofm: 50,
        fshape: [5, 5],
        lrule_init: *gd,
        weight_init: *wt_init,
      },
      !obj:neon.models.layer2.PoolingLayer {
        name: layer4,
        op: 'max',
        fshape: [2, 2],
        stride: 2,
      },
      !obj:neon.models.layer2.FCLayer {
        name: layer5,
        nout: 500,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:neon.transforms.rectified.RectLin {},
      },
      &lastlayer !obj:neon.models.layer2.FCLayer {
        name: output,
        nout: 10,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:neon.transforms.logistic.Logistic {},
      },
      &costlayer !obj:neon.models.layer2.CostLayer {
        name: cost,
        ref_layer: *datalayer,
        cost: !obj:neon.transforms.cross_entropy.CrossEntropy {},
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}
