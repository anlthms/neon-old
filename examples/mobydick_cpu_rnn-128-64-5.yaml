# Experiment settings to train/test a small 1 hidden layer Neural Net on full
# MNIST.

!obj:neon.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:neon.backends.cpu.CPU {
    rng_seed: 0,
    seterr_handling: {
      all: 'raise', #  'warn' or 'raise'
    },
  },

  dataset: &ds !obj:neon.datasets.mobydick.MOBYDICK {
    backend: *be,
    repo_path: '/usr/local/data',
    sample_pct: 10, # 10% gives 400 batches like in rnn2
    unrolls: &ur 5,
  },

# define two alternative weight inits and use normal for debuggin LSTM
  wp: &wt_init {
    type: sparse_eigenvalued,
    sparseness: 15,
    eigenvalue: 1.2,
  },
  ww: &wt_init_x {
    type: normal,
    loc: 0.0,
    scale: 0.1,
  },

  # simple RNN model specification
  model: !obj:neon.models.rnn.RNN {
    backend: *be,
    num_epochs: 20,
    batch_size: &bs 50,
    unrolls: *ur,
    make_plots: True,
    shortcut_deriv: False,
    layers: [
      # recurrent layer, can be RecurrentHiddenLayer or RecurrentLSTMLayer
      !obj:neon.models.layer.RecurrentLSTMLayer { #
        name: recurrent,
        backend: *be,
        batch_size: *bs,
        pos: 0,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: h1lr,
          lr_params: &lrp {
            learning_rate: 0.1,
            backend: *be,
            momentum_params: {
              type: linear_monotone, # constant, nesterov dont work
              initial_coef: 0.9,
              saturated_coef: 0.99,
              start_epoch: 10,
              saturate_epoch: 100,
            },
          },
        },
        nin: 128, # and an implicit 64 rec weight.
        nout: 64,
        unrolls: *ur,
        activation: !obj:neon.transforms.tanh.Tanh {},
        gate_activation: !obj:neon.transforms.logistic.Logistic {},
        weight_init: *wt_init,
        weight_init_rec: *wt_init,

      },
      # output layer
      &lastlayer !obj:neon.models.layer.RecurrentOutputLayer {
        name: output,
        backend: *be,
        batch_size: *bs,
        pos: 1,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: outputlr,
          lr_params: *lrp,
        },
        nin: 64,
        nout: 128,
        unrolls: *ur,
        activation: !obj:neon.transforms.logistic.Logistic {},
        weight_init: *wt_init,
      },
    ],
    cost: !obj:neon.transforms.cross_entropy.CrossEntropy {
      backend: *be,
      batch_size: *bs,
      olayer: *lastlayer,
    },
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}

