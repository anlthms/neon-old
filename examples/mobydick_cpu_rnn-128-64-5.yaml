# Experiment settings to train/test a small 1 hidden layer Neural Net on full
# MNIST.

!obj:neon.experiments.fit_predict_err.FitPredictErrorExperiment {
  backend: &be !obj:neon.backends.cpu.CPU {
    rng_seed: 0,
    seterr_handling: {
      all: 'raise', #  'warn' or 
    },
  },

  datasets: [
    # Moby Dick data
    !obj:neon.datasets.mobydick.MOBYDICK {
      backend: *be,
      repo_path: '/usr/local/data',
      sample_pct: 1, # 100 for full, 10 subsample for speed
    },
  ],

  # simple RNN model specification
  model: !obj:neon.models.rnn.RNN {
    backend: *be,
    num_epochs: 30,
    batch_size: &bs 100,
    unrolls: 5,
    cost: !obj:neon.transforms.cross_entropy.CrossEntropy {},
    layers: [
      # recurrent layer
      !obj:neon.models.layer.RecurrentLayer {
        name: recurrent,
        backend: *be,
        batch_size: *bs,
        pos: 0,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: h1lr,
          lr_params: {
            learning_rate: &lr 0.1,
            backend: *be,
            momentum_params: &mm {
              type: constant, #constant, nesterov
              initial_coef: 0.90,
            },
          },
        },
        nin: 128, # and an implicit 64 rec weight.
        nout: 64,
        activation: !obj:neon.transforms.logistic.Logistic {},
        weight_init: {
          type: node_normalized,
          scale: 4.0,
          bias_init: 0.0,
        },
        weight_init_rec: {
          type: sparse_eigenvalued,
          sparseness: 15,
          eigenvalue: 1.2,
        },
      },
      # output layer
      !obj:neon.models.layer.LayerWithNoBias {
        name: output,
        backend: *be,
        batch_size: *bs,
        pos: 1,
        learning_rule: !obj:neon.models.learning_rule.GradientDescentMomentum {
          name: outputlr,
          lr_params: {
            learning_rate: *lr,
            backend: *be,
            momentum_params: *mm,
          },
        },
        nin: 64, # previous nout + 1 for the bias
        nout: 128,
        activation: !obj:neon.transforms.logistic.Logistic {},
        weight_init: {
          type: node_normalized,
          scale: 4.0,
          bias_init: 0.0,
        },
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}

